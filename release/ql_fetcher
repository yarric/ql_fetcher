//
//  networking.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 22/08/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_networking_hpp
#define ql_networking_hpp

#include <string>
#include <curl/curl.h>
#include <sstream>
#include <iostream>
#include <chrono>
#include <thread>

namespace ql_fetcher
{
    std::string fetch_raw(const std::string&);
}



#ifdef QL_FETCHER_IMPL
namespace ql_fetcher
{
    size_t store_callback(const char* ptr, const size_t size,
                                 const size_t nmemb, std::stringstream* stream)
    {
        auto buff = std::string(ptr, ptr + nmemb/size);
        (*stream) << buff;
        return size * nmemb;
    }
    
    std::string fetch_raw(const std::string& data_url)
    {
        CURL* curl;
        CURLcode res;
        
        curl = curl_easy_init();
        
        curl_easy_setopt(curl, CURLOPT_URL, data_url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, store_callback);
        
        std::stringstream stream;
        
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&stream);
        //        curl_easy_setopt(curl, CURLOPT_USERAGENT, "libcurl-agent/1.0");
        
        std::cout << "\nREQUESTING: " << data_url;
        
        using namespace std::chrono_literals;
        std::this_thread::sleep_for(500ms);
        
        res = curl_easy_perform(curl);
        std::cout << "\n -- OK\n";
        
        curl_easy_cleanup(curl);
        
        if(res == CURLE_OK) return stream.str();
        else return "";
    }
};
#endif // QL_FETCHER_IMPL

#endif /* ql_networking_hpp */
//
//  ql_fetcher.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 22/09/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_fetcher_h
#define ql_fetcher_h

#include "networking.hpp"
#include "vendor_specific.hpp"
#include "request_params.hpp"
#include "request.hpp"
#include "utils.hpp"
#include "response.hpp"

#endif /* ql_fetcher_h */
//
//  request.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 21/09/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_request_hpp
#define ql_request_hpp

#include "request_params.hpp"
#include "response.hpp"
#include "networking.hpp"
#include <string>
#include <future>
#include <functional>


namespace ql_fetcher
{
    std::string& get_api_key();
    
    class request
    {
    public:
        request(const std::string& data_code, const std::string& source_code)
        {
            dataset(data_code);
            database(source_code);
            params._api_key = get_api_key();
        }
        
        request& database(const std::string& source_code)
        {
            params.update(params._database_code != source_code);
            
            params._database_code = source_code;
            return *this;
        }
        
        request& dataset(const std::string& data_code)
        {
            params.update(params._dataset_code != data_code);
            
            params._dataset_code = data_code;
            return *this;
        }
        
        request& limit(size_t n)
        {
            params.update(params._limit != n);
            
            params._limit = n;
            return *this;
        }
        
        request& column(size_t n)
        {
            params.update(params._column_index != n);
            
            params._column_index = n;
            return *this;
        }
        
        request& begin(const std::string& yyyy_mm_dd)
        {
            params.update(params._start_date != yyyy_mm_dd);
            
            params._start_date = yyyy_mm_dd;
            return *this;
        }
        
        request& end(const std::string& yyyy_mm_dd)
        {
            params.update(params._end_date != yyyy_mm_dd);
            
            params._end_date = yyyy_mm_dd;
            return *this;
        }
        
        request& order(sort_order _order)
        {
            params.update(params._order != _order);
            
            params._order = _order;
            return *this;
        }
        
        request& timeframe(sampling_freq freq)
        {
            params.update(params._timeframe != freq);
            
            params._timeframe = freq;
            return *this;
        }
        
        request& transform(calc_kind calc)
        {
            params.update(params._transform != calc);
            
            params._transform = calc;
            return *this;
        }
        
        request& api_key(const std::string& key)
        {
            params.update(params._api_key != key);
            
            params._api_key = key;
            return *this;
        }
        
        request& as(result_kind data_kind)
        {
            params.update(params._fetch_as != data_kind);
            
            params._fetch_as = data_kind;
            return *this;
        }
        
        const std::string& database() const
        {
            return params._database_code;
        }
        
        const std::string& dataset() const
        {
            return params._dataset_code;
        }
        
        size_t limit() const
        {
            return params._limit;
        }
        
        size_t column() const
        {
            return params._column_index;
        }
        
        const std::string& begin() const
        {
            return params._start_date;
        }
        
        const std::string& end() const
        {
            return params._end_date;
        }
        
        sort_order order() const
        {
            return params._order;
        }
        
        sampling_freq timeframe() const
        {
            return params._timeframe;
        }
        
        calc_kind transform() const
        {
            return params._transform;
        }
        
        const std::string& api_key() const
        {
            return params._api_key;
        }
        
        std::string url() const
        {
            return form_request(params);
        }
        
        template <typename CallBack>
        auto with(CallBack cb)
        {
            return std::async(std::launch::deferred,
            [=] {
                return cb(make().get());
            });
        }
        
        template <typename CallBack, typename FallBack>
        auto with_or(CallBack cb, FallBack fb)
        {
            return with([=](response& resp)
            {
                if (resp.empty() || resp.fail())
                    return fb(resp);
                else
                    return cb(resp);
            });
        }
        
        std::future<response&> make()
        {
            if (params.updated())
                cached_resp = response{ fetch_raw(url()) };
            
            return std::async(std::launch::async,
            [&] () -> response& {
                return cached_resp;
            });
        }
        
    private:
        request_params params;
        response cached_resp { "" };
    };
}

#endif /* ql_request_hpp */
//
//  request_params.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 21/09/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_request_params_h
#define ql_request_params_h

#include "vendor_specific.hpp"
#include <string>

namespace ql_fetcher
{
    typedef struct
    {
        std::string _database_code;
        std::string _dataset_code;
        
        size_t _limit{ 0 };
        size_t _column_index{ 0 };
        
        std::string _start_date;
        std::string _end_date;
        
        sort_order _order{ desc };
        
        sampling_freq _timeframe{ none };
        
        calc_kind _transform{ no_calc };
        
        std::string _api_key;
        
        result_kind _fetch_as{ json };
        
        void update(bool yes_no) { _updated |= yes_no; }
        
        bool updated() const { return _updated; }
        
    private:
        bool _updated{ true };
    } request_params;
    
    std::string form_request(const request_params&);
}

#endif /* ql_request_params_h */
//
//  response.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 22/08/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_response_hpp
#define ql_response_hpp

#include "vendor_specific.hpp"
#include <iostream>
#include <string>
#include <future>

namespace ql_fetcher
{
    class response
    {
    public:
        response(const std::string& raw_data)
            : _raw_data{ raw_data } {}
        
        const std::string& str()
        {
            return _raw_data;
        }

        bool empty()
        {
            if (str().empty()) return true;
            else return no_data_returned(str());
        }
        
        bool fail()
        {
            return str().empty();
        }
        
    private:
        std::string _raw_data;
    };
}

#endif /* ql_response_hpp */
//
//  utils.hpp
//  ql_fetcher
//
//  Created by Yarrik Shkurat on 03/10/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is furnished
//  to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#ifndef ql_utils_hpp
#define ql_utils_hpp

#include "request.hpp"
#include <string>

namespace ql_fetcher
{
    request fetch(const std::string& data_code, const std::string& source_code);
    
    void set_api_key(const std::string&);
    
    std::string& get_api_key();
}



#ifdef QL_FETCHER_IMPL
namespace ql_fetcher
{
    std::string* _global_api_key = new std::string( "" );
    
    request fetch(const std::string& data_code, const std::string& source_code)
    {
        return request{data_code, source_code};
    }
    
    void set_api_key(const std::string& api_key)
    {
        *_global_api_key = api_key;
    }
    
    std::string& get_api_key()
    {
        return *_global_api_key;
    }
}
#endif // QL_FETCHER_IMPL

#endif /* ql_utils_hpp */

//
//  vendor_specific.hpp
//  ql_fetcher
//
//  Created by Yaric Shkurat on 25/09/2017.
//  Copyright © 2017 Yarrik Sh. All rights reserved.
//

#ifndef ql_vendor_specific_hpp
#define ql_vendor_specific_hpp

#include <sstream>
#include <string>

namespace ql_fetcher
{
    enum sort_order
    {
        desc = 0,
        asc = 1
    };
    
    enum sampling_freq
    {
        none = 0,
        daily = 1,
        weekly = 2,
        monthly = 3,
        quarterly = 4,
        annual = 5
    };
    
    enum calc_kind
    {
        no_calc = 0,
        diff = 1,
        rdiff = 2,
        rdiff_from = 3,
        cumul = 4,
        normalize = 5
    };
    
    enum result_kind
    {
        json = 0,
        csv = 1
    };
    
    std::string to_string(calc_kind);
    
    std::string to_string(result_kind);
    
    std::string to_string(sort_order);
    
    std::string to_string(sampling_freq);
    
    bool no_data_returned(const std::string& response);
}



#ifdef QL_FETCHER_IMPL
#include "request_params.hpp"

#define QL_DATASET_PATH   "https://www.quandl.com/api/v3/datasets/"

namespace ql_fetcher
{
    static const char * sort_orders_str[] = {"desc", "asc"};
    
    static const char * sampling_freqs_str[] =
        {"none", "daily", "weekly", "monthly", "quarterly", "annual"};
    
    static const char * calc_kinds_str[] =
        {"none", "diff", "rdiff", "rdiff_from", "cumul", "normalize"};
    
    static const char * result_kinds_str[] = {"json", "csv"};
    
    std::string to_string(sort_order order)
    {
        if (order <= asc)
            return std::string(sort_orders_str[order]);
        else
            return "";
    }
    
    std::string to_string(sampling_freq freq)
    {
        if (freq <= annual)
            return std::string(sampling_freqs_str[freq]);
        else
            return "";
    }
    
    std::string to_string(calc_kind calc)
    {
        if (calc <= normalize)
            return std::string(calc_kinds_str[calc]);
        else
            return "";
    }
    
    std::string to_string(result_kind res_kind)
    {
        if (res_kind <= csv)
            return std::string(result_kinds_str[res_kind]);
        else
            return "";
    }
    
    std::string form_request(const request_params& params)
    {
        std::stringstream request_url;
        
        request_url << QL_DATASET_PATH
        << params._database_code << "/"
        << params._dataset_code
        << "." << to_string(params._fetch_as) << "?";
        
        if (params._limit > 0)
            request_url << "limit=" << params._limit << "&";
        
        if (params._column_index > 0)
            request_url << "column_index=" << params._column_index << "&";
        
        if (!params._start_date.empty())
            request_url << "start_date=" << params._start_date << "&";
        
        if (!params._end_date.empty())
            request_url << "end_date=" << params._end_date << "&";
        
        request_url
        << "order=" << to_string(params._order) << "&"
        << "collapse=" << to_string(params._timeframe) << "&"
        << "transform=" << to_string(params._transform);
        
        if (!params._api_key.empty())
            request_url << "&" << "api_key=" << params._api_key;
        
        return request_url.str();
    }
    
    bool no_data_returned(const std::string& response)
    {
        return response.find("quandl_error") != std::string::npos;
    }
}
#endif // QL_FETCHER_IMPL

#endif /* ql_vendor_specific_hpp */
